# For all PRs, this workflow will
#     - Install deps
#     - Lint
#     - Typecheck
#     - Test
name: CI

on:
  # will run on all PRs that are opened or updated (synchronized)
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.AXIS_NOW_ACCESS_TOKEN }}
      - id: nvmrc
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      
      - name: Use Node Version from nvmrc
        uses: actions/setup-node@v1
        with: { node-version: '${{ steps.nvmrc.outputs.NODE_VERSION }}' }

      - name: Cache and install node modules
        uses: bahmutov/npm-install@v1
      - name: Lint
        run: npm run lint

  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.AXIS_NOW_ACCESS_TOKEN }}
      - id: nvmrc
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Use Node Version from nvmrc
        uses: actions/setup-node@v1
        with: { node-version: "${{ steps.nvmrc.outputs.NODE_VERSION }}" }
      - name: Cache and install node modules
        uses: bahmutov/npm-install@v1
      - name: Typecheck
        run: node_modules/typescript/bin/tsc --noEmit

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.AXIS_NOW_ACCESS_TOKEN }}
      - id: nvmrc
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Use Node Version from nvmrc
        uses: actions/setup-node@v1
        with: { node-version: "${{ steps.nvmrc.outputs.NODE_VERSION }}" }
      - name: Cache and install node modules
        uses: bahmutov/npm-install@v1
      - name: Test
        run: npm run test:ci -- --coverage
      - name: Coveralls Report
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  publish_beta:
    name: Publish beta image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true
          token: ${{ secrets.AXIS_NOW_ACCESS_TOKEN }}

      - id: nvmrc
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Use Node Version from nvmrc
        uses: actions/setup-node@v1
        with: { node-version: "${{ steps.nvmrc.outputs.NODE_VERSION }}" }

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get short SHA
        id: get_sha
        run: echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"

      - name: Build and push to Docker Hub
        id: publish_docker_hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: nypl/patron-web:test, nypl/patron-web:test.${{ steps.get_sha.outputs.short_sha }}
